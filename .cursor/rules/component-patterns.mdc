---
alwaysApply: true
---

# 컴포넌트 패턴 가이드

## React 컴포넌트 패턴

- **항상 화살표 함수**: `const ComponentName = () => {}`
- **함수 대신 const 사용**: 적절한 TypeScript 타입과 함께
- **얼리 리턴**: 조건부 렌더링용
- **설명적 네이밍**: 시맨틱 의미를 가진 이름

## 컴포넌트 구조

```tsx
// 좋은 예: 반응형, 접근성, 시맨틱
const ContactSection = () => (
  <section className='bg-gray-50 py-16 md:py-24'>
    <div className='container mx-auto px-4'>
      <h2 className='mb-8 text-center text-3xl font-bold md:text-4xl'>
        문의하기
      </h2>
      <div className='mx-auto max-w-2xl'>{/* 연락처 폼 */}</div>
    </div>
  </section>
)
```

## HTML 및 접근성 패턴

- **시맨틱 HTML**: 항상 시맨틱 요소 사용
- **ARIA 속성**: 스크린 리더를 위한 속성
- **키보드 내비게이션**: 지원
- **단일 페이지 내비게이션**: 포커스 관리
- **모든 이미지**: alt 텍스트 포함
- **적절한 제목 계층**: h1 → h2 → h3

## 애니메이션 및 상호작용 패턴

### 스무스 스크롤링

- **Intersection Observer**: 섹션 가시성 확인
- **스무스 스크롤 동작**: 앵커 내비게이션
- **진행 표시기**: 페이지 스크롤
- **패럴랙스 효과**: 히어로 섹션

### 마이크로 인터랙션

- **호버 효과**: 카드 및 버튼
- **로딩 상태**: 폼
- **페이드인 애니메이션**: 섹션
- **스태거 애니메이션**: 목록

```tsx
// 예시: 애니메이션을 위한 Intersection Observer
const useInView = (threshold = 0.1) => {
  const [isInView, setIsInView] = useState(false)
  const ref = useRef<HTMLElement>(null)

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => setIsInView(entry.isIntersecting),
      { threshold },
    )

    if (ref.current) observer.observe(ref.current)

    return () => observer.disconnect()
  }, [threshold])

  return [ref, isInView] as const
}
```

## 폼 처리 패턴

### 문의 폼 요구사항

- **Zod 유효성 검사**: 모든 입력값
- **실시간 유효성 검사**: 피드백
- **접근 가능한 에러 메시지**
- **성공/로딩 상태**
- **이메일 통합**: 다음 단계

```tsx
const contactFormSchema = z.object({
  name: z.string().min(2, '이름은 2자 이상 입력해주세요'),
  email: z.string().email('올바른 이메일 형식을 입력해주세요'),
  company: z.string().optional(),
  message: z.string().min(10, '메시지는 10자 이상 입력해주세요'),
  service: z.enum(['aerial-survey', 'inspection', 'delivery']),
})
```

## 섹션 컴포넌트 패턴

각 섹션은 다음 구조를 따라야 합니다:

1. **HeroSection**: 브랜드 메시지와 CTA
2. **ServicesSection**: 서비스/솔루션 개요
3. **UseCasesSection**: 실제 사용 사례
4. **AboutSection**: 회사 스토리
5. **NewsSection**: 최신 뉴스/보도자료
6. **ContactSection**: 문의 폼

## 컴포넌트 파일 구조

```
components/
├── ui/                # Shadcn UI 재사용 컴포넌트
├── layout/            # 레이아웃 컴포넌트
│   ├── Header.tsx     # 고정 네비게이션
│   ├── Footer.tsx     # 사이트 푸터
│   └── ScrollToTop.tsx # 스무스 스크롤 유틸리티
└── sections/          # 홈페이지 섹션
    ├── HeroSection.tsx
    ├── ServicesSection.tsx
    ├── UseCasesSection.tsx
    ├── AboutSection.tsx
    ├── NewsSection.tsx
    └── ContactSection.tsx
```

## 콘텐츠 관리 패턴

- **정적 콘텐츠**: 쉬운 유지보수를 위한 TypeScript 상수
- **구조화된 데이터**: 서비스, 사용 사례, 뉴스
- **다국어 지원**: 고려사항 (한국어 중심)
- **SEO 메타데이터**: 각 섹션별

```tsx
// lib/constants.ts
export const SERVICES = [
  {
    id: 'aerial-survey',
    title: '항공 측량',
    description: '정밀한 드론 측량으로 정확한 지형 데이터 제공',
    image: '/images/services/aerial-survey.jpg',
    features: ['고해상도 매핑', '3D 모델링', '실시간 데이터'],
  },
  // ... 더 많은 서비스
] as const
```

## 공통 작업 패턴

### 새 섹션 추가

1. `components/sections/`에 컴포넌트 생성
2. 적절한 앵커 ID로 메인 페이지에 추가
3. 내비게이션 링크 업데이트
4. 상수에 콘텐츠 추가
5. 반응형 디자인 구현
6. 애니메이션용 intersection observer 추가

### 콘텐츠 업데이트

1. `lib/constants.ts`에서 상수 수정
2. 필요시 TypeScript 타입 업데이트
3. 반응형 동작 테스트
4. 필요시 메타 태그 업데이트
